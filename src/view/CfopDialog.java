/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view;

import controller.CFOPController;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.CFOP;
import model.CFOPTableModel;
import model.NCM;
import util.GerarCodigoAleatorio;
import util.StringUtils;

/**
 *
 * @author edson
 */
public class CfopDialog extends javax.swing.JDialog {

    private CFOPController cfopController;
    private List<NCM> cfops;
    int idCfop = 0;

    /**
     * Creates new form CfopDialog
     */
    public CfopDialog(java.awt.Frame parent, boolean modal) throws SQLException {
        super(parent, modal);
        initComponents();
        cfopController = new CFOPController();
        carregaTabela();
        txtCodigoCfop.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnPrincipal = new javax.swing.JPanel();
        spPrincipal = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblSiglaUnidade = new javax.swing.JLabel();
        txtCodigoCfop = new javax.swing.JTextField();
        lblDescricaoUnidade = new javax.swing.JLabel();
        txtDescricaoCfop = new javax.swing.JTextField();
        btnSalvarCfop = new javax.swing.JButton();
        ckAtivaCfop = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        lblIdUnidade = new javax.swing.JLabel();
        txtIdCfop = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CFOP");

        pnPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        pnPrincipal.setPreferredSize(new java.awt.Dimension(809, 300));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "CODIGO", "DESCRIÇÃO", "ATIVO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        spPrincipal.setViewportView(jTable1);

        lblSiglaUnidade.setText("CODIGO CFOP");

        lblDescricaoUnidade.setText("DESCRIÇÃO DE CFOP");

        btnSalvarCfop.setBackground(new java.awt.Color(0, 255, 0));
        btnSalvarCfop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/icons8-salvar-22.png"))); // NOI18N
        btnSalvarCfop.setText("SALVAR");
        btnSalvarCfop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarCfopActionPerformed(evt);
            }
        });

        ckAtivaCfop.setSelected(true);
        ckAtivaCfop.setText("ATIVO");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/icons8-vassoura-22.png"))); // NOI18N
        jButton1.setText("LIMPAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblIdUnidade.setText("ID");

        txtIdCfop.setText("0");
        txtIdCfop.setEnabled(false);

        javax.swing.GroupLayout pnPrincipalLayout = new javax.swing.GroupLayout(pnPrincipal);
        pnPrincipal.setLayout(pnPrincipalLayout);
        pnPrincipalLayout.setHorizontalGroup(
            pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDescricaoCfop)
                    .addGroup(pnPrincipalLayout.createSequentialGroup()
                        .addGroup(pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckAtivaCfop)
                            .addComponent(lblDescricaoUnidade)
                            .addGroup(pnPrincipalLayout.createSequentialGroup()
                                .addComponent(btnSalvarCfop)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)))
                        .addGap(0, 26, Short.MAX_VALUE))
                    .addGroup(pnPrincipalLayout.createSequentialGroup()
                        .addGroup(pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIdUnidade)
                            .addComponent(txtIdCfop, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnPrincipalLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(lblSiglaUnidade))
                            .addGroup(pnPrincipalLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCodigoCfop)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnPrincipalLayout.setVerticalGroup(
            pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnPrincipalLayout.createSequentialGroup()
                        .addGroup(pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIdUnidade)
                            .addComponent(lblSiglaUnidade))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIdCfop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCodigoCfop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDescricaoUnidade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescricaoCfop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckAtivaCfop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSalvarCfop)
                            .addComponent(jButton1))
                        .addGap(0, 124, Short.MAX_VALUE))
                    .addComponent(spPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) { // Verifica se foi um duplo clique
            Object[] options = {"Confirmar", "Cancelar"};
            if (JOptionPane.showOptionDialog(null, "Clique Confirmar para alterar",
                    "Informação", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]) == 0) {
                int rowIndex = jTable1.getSelectedRow(); // Obtenha a linha selecionada na tabela
                idCfop = (int) jTable1.getValueAt(rowIndex, 0); // Obtenha o ID da primeira coluna (coluna 0)

                CFOP cfop = cfopController.obterCFOPPorId(idCfop);

                idCfop = cfop.getId();
                txtIdCfop.setText("" + cfop.getId());
                txtCodigoCfop.setText(cfop.getCodigo());
                txtCodigoCfop.requestFocus();
                txtDescricaoCfop.setText(cfop.getDescricao());
                ckAtivaCfop.setSelected(cfop.isAtivo());
                btnSalvarCfop.setText("ALTERAR");
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (evt.getKeyCode() == evt.VK_DELETE) {
            int rowIndex = jTable1.getSelectedRow(); // Obtenha a linha selecionada na tabela
            idCfop = (int) jTable1.getValueAt(rowIndex, 0); // Obtenha o ID da primeira coluna (coluna 0)

            Object[] options = {"Confirmar", "Cancelar"};
            if (JOptionPane.showOptionDialog(null, "Clique Confirmar para continuar",
                    "Informação", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[1]) == 0) {

                // Gerar um código aleatório
                String codigoDeConfirmacaoAleatorio = GerarCodigoAleatorio.gerarCodigoAleatorio();
                // Exibir um JOptionPane para obter o código
                String codigoDeConfirmacao = JOptionPane.showInputDialog(null,
                        "Insira o código de 4 dígitos: " + codigoDeConfirmacaoAleatorio,
                        "Confirmação", JOptionPane.WARNING_MESSAGE);
                // Comparar os códigos
                if (codigoDeConfirmacao != null && codigoDeConfirmacao.length() == 4
                        && codigoDeConfirmacao.equals(codigoDeConfirmacaoAleatorio)) {

                    cfopController.marcarCFOPComoDeletado(idCfop);
                    carregaTabela();
                } else {
                    JOptionPane.showMessageDialog(null, "Código incorreto ou invalido.");
                }
            }
            System.out.println("delete - " + idCfop);

        }
    }//GEN-LAST:event_jTable1KeyReleased

    private void btnSalvarCfopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarCfopActionPerformed
        if (idCfop != 0) {
            Object[] options = {"Confirmar", "Cancelar"};
            if (JOptionPane.showOptionDialog(null, "Deseja realmente alterar #" + idCfop,
                    "Aviso", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[1]) == 0) {
                // Gerar um código aleatório
                String codigoDeConfirmacaoAleatorio = GerarCodigoAleatorio.gerarCodigoAleatorio();
                // Exibir um JOptionPane para obter o código
                String codigoDeConfirmacao = JOptionPane.showInputDialog(null,
                        "Insira o código de 4 dígitos: " + codigoDeConfirmacaoAleatorio,
                        "Confirmação", JOptionPane.WARNING_MESSAGE);
                // Comparar os códigos
                if (codigoDeConfirmacao != null && codigoDeConfirmacao.length() == 4
                        && codigoDeConfirmacao.equals(codigoDeConfirmacaoAleatorio)) {
                    salvar();
                } else {
                    JOptionPane.showMessageDialog(null, "Código incorreto ou invalido.");
                }
            }
        } else {
            salvar();
        }

    }//GEN-LAST:event_btnSalvarCfopActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        limparCampos();

        carregaTabela();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CfopDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CfopDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CfopDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CfopDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CfopDialog dialog = null;
                try {
                    dialog = new CfopDialog(new javax.swing.JFrame(), true);
                } catch (SQLException ex) {
                    Logger.getLogger(CfopDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvarCfop;
    private javax.swing.JCheckBox ckAtivaCfop;
    private javax.swing.JButton jButton1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblDescricaoUnidade;
    private javax.swing.JLabel lblIdUnidade;
    private javax.swing.JLabel lblSiglaUnidade;
    private javax.swing.JPanel pnPrincipal;
    private javax.swing.JScrollPane spPrincipal;
    private javax.swing.JTextField txtCodigoCfop;
    private javax.swing.JTextField txtDescricaoCfop;
    private javax.swing.JTextField txtIdCfop;
    // End of variables declaration//GEN-END:variables

    public void carregaTabela() {
        List<CFOP> listaDeCfops = cfopController.listarCFOPs();

        CFOPTableModel tableModel = new CFOPTableModel(listaDeCfops); // Substitua "listaDeCfops" pelos seus dados
        jTable1.setModel(tableModel);
    }

    public void limparCampos() {
        idCfop = 0;
        txtIdCfop.setText("0");
        txtCodigoCfop.setText("");
        txtCodigoCfop.requestFocus();
        txtDescricaoCfop.setText("");
        ckAtivaCfop.setSelected(true);
        btnSalvarCfop.setText("SALVAR");
    }

    private void salvar() {

        String codigo = txtCodigoCfop.getText().toUpperCase(),
                descricao = StringUtils.restringirTamanhoString(txtDescricaoCfop.getText().toUpperCase(), 50);

        if (cfopController.codigoDescricaoVazios(codigo, descricao)) {
            JOptionPane.showMessageDialog(CfopDialog.this,
                    "Verifique campos vazios.", "Aviso",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            if (cfopController.validarCFOP(codigo)) {
                if (cfopController.salvarCFOP(idCfop, codigo.toUpperCase(),
                        descricao.toUpperCase(),
                        ckAtivaCfop.isSelected())) {
                    limparCampos();
                    carregaTabela();
                    JOptionPane.showMessageDialog(CfopDialog.this, "Cfop salva com sucesso.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

                } else {

                    JOptionPane.showMessageDialog(CfopDialog.this,
                            "Ocorreu um erro ao salvar a cfop.", "Erro",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(CfopDialog.this,
                        "Código NCM não valido!", "Aviso",
                        JOptionPane.WARNING_MESSAGE);
            }

        }
    }
}
